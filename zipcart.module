<?php

/**
 * @file
 * Drupal module for downloading groups of files.
 */

define('ZIPCART_PATH_ADD', 'zipcart/add');
define('ZIPCART_PATH_REMOVE', 'zipcart/remove');
define('ZIPCART_PATH_GET', 'zipcart/get');

/**
 * Implements hook_menu().
 */
function zipcart_menu() {
  $items['admin/config/media/zipcart'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zipcart_settings_form'),
    'title' => 'ZipCart',
    'description' => 'Configure settings for ZipCart',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'zipcart.admin.inc',
  );
  $items[ZIPCART_PATH_ADD] = array(
    'page callback' => 'zipcart_add_file_to_cart',
    'page arguments' => array(FALSE),
    'title' => 'Add file to Download Cart',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access zipcart downloads'),
  );
  $items[ZIPCART_PATH_ADD . '/AJAX'] = array(
    'page callback' => 'zipcart_add_file_to_cart',
    'page arguments' => array(TRUE),
    'title' => 'Add file to Download Cart',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access zipcart downloads'),
  );
  $items[ZIPCART_PATH_REMOVE] = array(
    'page callback' => 'zipcart_remove_file_from_cart',
    'page arguments' => array( FALSE ),
    'title' => 'Remove file to Download Cart',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access zipcart downloads'),
  );
  $items[ZIPCART_PATH_REMOVE .'/AJAX'] = array(
    'page callback' => 'zipcart_remove_file_from_cart',
    'page arguments' => array( TRUE ),
    'title' => 'Remove file to Download Cart',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access zipcart downloads'),
  );
  $items[ZIPCART_PATH_GET] = array(
    'page callback' => 'zipcart_get_zip',
    'title' => 'Download Cart Files',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access zipcart downloads'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function zipcart_theme($existing, $type, $theme, $fid) {
  return array(
    'zipcart_block_downloads' => array(
      'template' => 'zipcart-block-downloads',
      'variables' => array(
        'count' => 0,
        'files' => NULL,
      ),
    ),
    'zipcart_download' => array(
      'variables' => array(
        'text' => 'Download',
        'fid' => NULL,
        'options' => array(),
      ),
    ),
    'zipcart_link' => array(
      'variables' => array(
        'file' => NULL,
        'icon_directory' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_perm().
 */
function zipcart_permission() {
  return array(
    'access zipcart downloads' => array(
      'title' => t('Access ZipCart Downloads'),
      'description' => t('Allow users to access ZipCart Downloads'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function zipcart_block_info() {
  $blocks[0] = array(
    'info'  => t('ZipCart Downloads'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function zipcart_block_view($delta = '') {
  if (user_access('access zipcart downloads')) {
    switch ($delta) {
      case '0':
        $block = array(
          'subject' => t('My Downloads'),
          'content' => theme('zipcart_block_downloads'),
        );
        return $block;
    }
  }
}

/**
 * Return block content for zipcart block.
 */
function zipcart_block_content() {
  $count = (!empty($_SESSION['zipcart']['files'])) ? count($_SESSION['zipcart']['files']) : 0;
  $files = (!empty($_SESSION['zipcart']['files'])) ? $_SESSION['zipcart']['files'] : NULL;
  return theme('zipcart_block_downloads', $count, $files);
}

 /**
 * Implements hook_field_formatter_info().
 * @see field_example_field_formatter_view()
 */
function zipcart_field_formatter_info() {
  return array(
    'file_default' => array(
      'label' => t('Generic file'),
      'field types' => array('file','image'),
    ),
    'file_table' => array(
      'label' => t('Table of files'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 * @see field_example_field_formatter_info()
 */
function zipcart_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $options = array(
    'html' => FALSE,
    'query' => array('destination' => current_path()),
    'attributes' => array('class' => array('zipcart')),
  );
  if (variable_get('zipcart_field_display', 'link') == 'checkbox') {
    $options['attributes']['class'][] = 'zipcart-checkbox';
  }
  switch ($display['type']) {
    // This formatter simply outputs a zipcart link
    case 'file_default':
      foreach ($items as $delta => $item) {
        if (empty($item->description)) {
          $link_text = $item['filename'];
        }
        else {
          $link_text = $item['description'];
          $options['attributes']['title'] = check_plain($item['filename']);
        }
        $options['attributes']['id'] = 'zipcart-id-'.$item['fid'];
        if (!empty($_SESSION['zipcart']['files']) && isset($_SESSION['zipcart']['files'][$item['fid']])) {
          $path = ZIPCART_PATH_REMOVE.'/'.$item['fid'];
          $link_text .= ' (-)';
        }
        else {
          $path = ZIPCART_PATH_ADD.'/'.$item['fid'];
          $link_text .= ' (+)';
        }
        $mime = check_plain($item['filemime']);
        $icon_url = file_icon_url((object) $item);
        $icon = '<img class="file-icon" alt="" title="' . $mime . '" src="' . $icon_url . '" /> ';
        $element[$delta] = array(
          '#theme' => 'link',
          '#text' => $link_text,
          '#path' => $path,
          '#options' => $options,
          '#prefix' => $icon,
        );
      }
      break;
    // This formatter adds a zipcart download link to a file table
    case 'file_table':
      // Some formatters might need to display all values within a single piece
      // of markup.
      $rows = array();
      foreach ($items as $delta => $item) {       
        if (empty($item->description)) {
          $link_title = $item['filename'];
        }
        else {
          $link_title = $item['description'];
        }
        $link_text = 'Your Downloads';
        $options['attributes']['id'] = 'zipcart-id-'.$item['fid'];
        if (!empty($_SESSION['zipcart']['files']) && isset($_SESSION['zipcart']['files'][$item['fid']])) {
          $path = ZIPCART_PATH_REMOVE.'/'.$item['fid'];
          $link_text .= ' (-)';
        }
        else {
          $path = ZIPCART_PATH_ADD.'/'.$item['fid'];
          $link_text .= ' (+)';
        }
        $mime = check_plain($item['filemime']);
        $icon_url = file_icon_url((object) $item);
        $icon = '<img class="file-icon" alt="" title="' . $mime . '" src="' . $icon_url . '" /> ';
        $zipcart_table_link = l($link_text, $path, $options);
        
        $rows[] = array(
            (variable_get('zipcart_remove_hotlink', 0) == 0) ? theme('file_link', array('file' => (object) $item)) : $link_title,
            $zipcart_table_link,
            format_size($item['filesize']),
        );
      }
      $element[0] = array(
        '#theme' => 'table', 
        '#header' => array(t('Attachment'), t('Your Downloads'), t('Size')), 
        '#rows' => $rows,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_file_download().
 */
function zipcart_file_download($filepath) {
  // dpm($filepath);
}

/**
 * Implements hook_zipmethods().
 */
function zipcart_zipmethods() {
  $methods['zip_builtin'] = array(
    'title'    => 'PHP Zip extension',
    'callback' => '_zipcart_phpzip',
  );
  return $methods;
}

/**
 * Return an array of zip methods.
 */
function _zipcart_get_available_methods() {
  foreach (module_implements('zipmethods') as $module) {
    $function = $module . '_zipmethods';
    if ($methods = $function()) {
      if (is_array($methods)) {
        foreach ($methods as $key => $method) {
          $avail_methods[$key] = $method;
        }
      }
    }
  }
  return $avail_methods;
}

/**
 * Add a file path to a user's $_SESSION.
 *
 * Check the user has permission to access the file here, warn if they do not.
 */
function zipcart_add_file_to_cart($ajax = FALSE) {
  $fid = func_get_arg(1);
  $success = FALSE;
  $file = file_load($fid);
  if ($file) {
    $headers = module_invoke_all('file_download', $file->uri);
    if (!in_array(-1, $headers)) {
      // OK, hook_file_download didn't object.
      $files = array($file->uri);
      $files = module_invoke_all('filterzip', $files);
      if (!empty($files)) {
        $_SESSION['zipcart']['files'][$fid] = $file->uri;
        $success = TRUE;
      }
    }
  }

  $result = array(
    'cart' => $_SESSION['zipcart']['files'],
    'result' => $success,
    'action' => 'added',
  );
  if ($ajax) {
    drupal_json_output($result);
  }
  else {
    if ($success) {
      $targs = array(
        '%filename' => check_plain($file->filename),
        '!download' => l(t('Click here to download'), 'zipcart/get'),
      );
      drupal_set_message(t('The file %filename has been added to your cart. !download', $targs));
    }
    else {
      drupal_set_message(t('The file !filename could not be added to your cart.', array('!filename' => check_plain($filename))));
    }
    drupal_goto();
  }
}

/**
 * Remove a file path from a user's $_SESSION.
 *
 * Check the user has permission to access the file here, warn if they do not.
 */
function zipcart_remove_file_from_cart($ajax = FALSE) {
  $fid = func_get_arg(1);
  $success = FALSE;
  $file = file_load($fid);
  if (isset($_SESSION['zipcart']['files'][$fid])) {
    // file is in cart, remove now
    unset($_SESSION['zipcart']['files'][$fid]);
    $success = TRUE;
  }

  $result = array(
    'cart' => $_SESSION['zipcart']['files'],
    'result' => $success,
    'action' => 'removed',
  );
  if ($ajax) {
    drupal_json_output($result);
  }
  else {
    if ($success) {
      $targs = array(
        '%filename' => check_plain($file->filename),
        '!download' => l(t('Click here to download remaining files'), 'zipcart/get'),
      );
      drupal_set_message(t('The file %filename has been removed from your cart. !download', $targs));
    }
    else {
      drupal_set_message(t('The file !filename could not be removed from your cart.', array('!filename' => check_plain($filename))));
    }
    drupal_goto();
  }
}

/**
 * Get the files as a zip.
 */
function zipcart_get_zip() {
  if (empty($_SESSION['zipcart']['files'])) {
    drupal_set_message(t('Sorry, there are no files queued for you to download.'));
    drupal_goto();
  }
  else {
    $files = $_SESSION['zipcart']['files'];
    $files = module_invoke_all('filterzip', $files);

    if (!empty($files)) {
      $methods = _zipcart_get_available_methods();
      $zipmethod = variable_get('zipcart_zip_method', 'zip_builtin');
      if (isset($methods[$zipmethod])) {
        $zipfunction = $methods[$zipmethod]['callback'];
        if (!$zipfunction($files)) {
          return 'Download failed.';
        }
        else {
          drupal_set_message('Zip downloaded');
          return TRUE;
        }
      }
    }
  }
}

/**
 * Preprocess the list of files.
 *
 * Don't ever share these files:
 *   $excluded = array( 'sites/.*settings.*php' );
 *
 * Only ever include these files:
 *   $included = array( 'sites/files/.*' );
 *
 * Always include a certain file:
 *   $add = array( 'sites/default/files/README.txt' );
 */
function zipcart_filterzip($files) {
  $directory = drupal_realpath(file_default_scheme() . '://');
  foreach ($files as $i => &$file) {
    if (strpos(drupal_realpath($file), $directory) !== 0) {
      watchdog('zipcart', 'Forbidding download of !file',
                            array('!file' => $file), WATCHDOG_NOTICE);
      unset($files[$i]);
    }

    // Reject external URIs.
    $localpath = drupal_realpath($file);
    if ($localpath) {
      $file = $localpath;
    }
    else {
      watchdog('zipcart', 'External file cannot be added to zip. !file',
                          array('!file' => $file), WATCHDOG_NOTICE);
      unset($files[$i]);
    }

  }
  return $files;
}

/**
 * Invoke hook_zipcart_download_complete() when download completed.
 */
function _zipcart_download_complete($filename, $files) {
  module_invoke_all('zipcart_download_complete', $filename, $files);
}

/**
 * Zip callback: PHP zip extension.
 */
function _zipcart_phpzip($files) {
  $zip = new ZipArchive();
  // We build the file in $filename, but file_transfer will
  // only deliver it via a registered Drupal stream.
  $filename = drupal_tempnam(file_directory_temp(), 'zipcart');
  $transfer_filename = 'temporary://' . basename($filename);
  $zip_open = $zip->open($filename, ZIPARCHIVE::CREATE | ZIPARCHIVE::OVERWRITE);
  if ($zip_open === TRUE) {
    $zip->setArchiveComment('Generated by ZipCart for Drupal.');
    // http://drupal.org/node/1234282 - duplicate filenames.
    foreach ($files as $file) {
      if (file_exists($file)) {
        if ($zip->addFile($file, basename($file))) {
          // drupal_set_message(t('!file added to Zip.', array('!file' => basename($file))));
        }
        else {
          drupal_set_message(t('!file could not be added to Zip.', array('!file' => $file)), 'error');
          watchdog('zipcart', 'Failed to add !file to Zip.', array('!file' => $file), WATCHDOG_ERROR);
        }
      }
      else {
        watchdog('zipcart', 'Failed to locate !file.', array('!file' => $file), WATCHDOG_ERROR);
        drupal_set_message('!file not found.', array('!file' => $file), 'error');
      }
    }
    if (!$zip->close()) {
      watchdog('zipcart', 'Error saving file: !status_string', array('!status_string' => $zip->getStatusString()), WATCHDOG_ERROR);
    }

    $headers = module_invoke_all('file_download', $filename);
    if (in_array(-1, $headers)) {
      return drupal_access_denied();
    }
    $zip_filename = _zipcart_zip_filename();
    $headers['Content-Type'] = file_get_mimetype($zip_filename);
    $headers['Content-Disposition'] = 'attachment; filename="' . $zip_filename . '"';
    // FIXME: it would be nice to wait until the file transfer completes before
    // we clear the files out of the session. However, if we do that, the user
    // can't add new files to their cart until the zip is downloaded. So we'll
    // do this first.
    $files = $_SESSION['zipcart']['files'];
    $_SESSION['zipcart']['files'] = array();
    drupal_register_shutdown_function('_zipcart_download_complete', $filename, $files);
    if (!file_transfer($transfer_filename, $headers)) {
      watchdog('zipcart', 'Unable to transfer file from !filename.', array('!filename' => check_plain($transfer_filename)), WATCHDOG_ERROR);
      drupal_set_message(t('Unable to transfer file from !filename.', array('!filename' => check_plain($transfer_filename))), 'error');
    }
  }
  else {
    watchdog('zipcart', 'Unable to create file !filename.', array('!filename' => check_plain($filename)), WATCHDOG_ERROR);
    drupal_set_message(t('Unable to create file !filename.', array('!filename' => check_plain($filename))), 'error');
    drupal_access_denied();
  }
}

/**
 * Generate a suitable filename for the zip.
 */
function _zipcart_zip_filename() {
  $filename = 'Files - ' . date('Y-m-d_Hi') . '.zip';
  return $filename;
}

/**
 * Obtain correct path to return user to after adding file to cart.
 */
function _zipcart_get_destination_alias() {
  if (isset($_REQUEST['destination'])) {
    $path = check_plain(drupal_get_path_alias($_REQUEST['destination']));
  }
  else {
    // Use $_GET here to retrieve the original path in source form.
    $path = isset($_GET['q']) ? check_plain(drupal_get_path_alias($_GET['q'])) : '';
  }
  return array(
    'destination' => $path,
  );
}

/**
 * Theme function to generate a download link.
 */
function theme_zipcart_download($vars = array()) {
  $text = !empty($vars['text']) ? $vars['text'] : '';
  $fid = !empty($vars['fid']) ? $vars['fid'] : null;
  if (is_null($fid)) {
    return null;
  }
  $options = !empty($vars['options']) ? $vars['options'] : array();
  $default_options = array(
    'attributes' => array(
      'class' => 'zipcart',
    ),
    'query' => _zipcart_get_destination_alias(),
  );
  $options = array_merge($default_options, $options);
  return l($text, ZIPCART_PATH_ADD . '/' . $fid, $options);
}

/**
 * Implements hook_zipcart_download_complete().
 */
function zipcart_zipcart_download_complete($filename) {
  drupal_unlink($filename);
}

/**
 * Theme preprocess function.
 */
function zipcart_preprocess_zipcart_block_downloads(&$variables) {
  drupal_add_js(drupal_get_path('module', 'zipcart') . '/zipcart.js');
  drupal_add_js(array('zipcart' => array('path_add' => ZIPCART_PATH_ADD, 'path_add_ajax' => ZIPCART_PATH_ADD .'/AJAX', 'path_remove' => ZIPCART_PATH_REMOVE, 'path_remove_ajax' => ZIPCART_PATH_REMOVE .'/AJAX',)), 'setting');
  $variables['count'] = (!empty($_SESSION['zipcart']['files'])) ? sizeof($_SESSION['zipcart']['files']) : 0;
  $variables['files'] = (!empty($_SESSION['zipcart']['files'])) ? $_SESSION['zipcart']['files'] : NULL;
}
